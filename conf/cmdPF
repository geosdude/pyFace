(dI1
S'print self.cmdDct'
sI2
S'print type(self.cmdDct)'
sI3
S'self.bypass = 1'
sI4
S'self.echoThis = list'
sI5
S"self.s('echoThis', list())"
sI6
S'cls'
sI7
S'print os.getcwd()'
sI8
S'cls'
sI9
S'P()'
sI10
S'y'
sI11
S'cls'
sI12
S'cls'
sI13
S'cls'
sI14
S'print self.pathHistLst'
sI15
S'print self.extHistLst'
sI16
S'print self.lastDir'
sI17
S'print self.excludeLst'
sI18
S'exit'
sI19
S'cls'
sI20
S'print self.commonCmdsDct'
sI21
S"self.commonCmdsDct['exit'] = 'self.exit()'"
sI22
S"self.commonCmdsDct['quit'] = 'self.onQuit()'"
sI23
S'print self.commonCmdsDct'
sI24
S'exit'
sI25
S'cls'
sI26
S'self.write("File read error:  NoneType encountered or user canceled the operation. ")'
sI27
S'exit'
sI28
S'exit'
sI29
S'cls'
sI30
S'exit()'
sI31
S'cls'
sI32
S'print self.lastDir'
sI33
S'self.setPathHistory(os.getcwd())'
sI34
S'self.setPathHistory(os.getcwd())'
sI35
S'self.setPathHistory(os.getcwd())'
sI36
S'self.setPathHistory(os.getcwd())'
sI37
S"self.s('pathHistDct', dict())"
sI38
S"self.s('pathHistCnt', 0)"
sI39
S"self.s('phPF', 'C:/GIS/GeoPy/conf/phPF')"
sI40
S"print self.envDct['phPF']"
sI41
S'self.setPathHistory(os.getcwd())'
sI42
S'print self.pathHistDct'
sI43
S'cls'
sI44
S'print self.cmdPF'
sI45
S'self.s(\'guiPF\', "/GeoPy/conf/guiPF")'
sI46
S'exit'
sI47
S'exit()'
sI48
S'print self.commonCmdsDct'
sI49
S'self.commonCmdsDct[\'exit\'] = "self.exit()"'
sI50
S'print self.commonCmdsDct'
sI51
S'self.commonCmdsDct[\'quit\'] = "self.closeGui()"'
sI52
S'print self.commonCmdsDct'
sI53
S"self.s('commonCmdsDct', self.commonCmdsDct)"
sI54
S'cls'
sI55
S"print self.envDct['commonCmdsDct']"
sI56
S"print self.envDct['commonCmdsDct']"
sI57
S'print self.cmdDct'
sI58
S'print self.cmdCnt'
sI59
S'exit'
sI60
S'print self.commonCmdsDct'
sI61
S'self.commonCmdsDct[\'exit\'] = "self.exit()"'
sI62
S'self.commonCmdsDct[\'quit\'] = "self.closeGui()"'
sI63
S'print self.commonCmdsDct'
sI64
S'exit'
sI65
S'print os.getcwd()'
sI66
S'print os.version()'
sI67
S'from platform import version'
sI68
S'print platform.version()'
sI69
S'print version()'
sI70
S'import platform'
sI71
S'print version()'
sI72
S'for x in dir(platform):  print x'
sI73
S'exit'
sI74
S'exit'
sI75
S"print os.path.split(os.path.splitdrive(os.path.split(os.environ['PYHOME'])[0])[1])[1]"
sI76
S"print os.environ['PYHOME']"
sI77
S"print os.path.split(os.environ['PYHOME'])[0]"
sI78
S"print os.path.split(os.environ['PYHOME'])[1]"
sI79
S'print sys.version_info.major'
sI80
S'print sys.version_info.releaselevel'
sI81
S'import platform'
sI82
S'print version()'
sI83
S'print self.version()'
sI84
S'print platform.version()'
sI85
S'print sys.verNo'
sI86
S'print self.verNo'
sI87
S"os.system('VBoxManage startvm Ubuntu_Server_1')"
sI88
S"os.system('VBoxManage startvm Ubuntu_Server_1')"
sI89
S"os.system('VBoxManage startvm Ubuntu_Server_1')"
sI90
S''
sI91
S"os.system('VBoxManage controlvm Ubuntu_Server_1 savestate')"
sI92
S"os.system('VBoxManage startvm Ubuntu_Server_1')"
sI93
S'echo %PATH%'
sI94
S"print 'something'"
sI95
S'print self.cmdDct'
sI96
S"print self.guiDct['cmdDct']"
sI97
S"print 'something'"
sI98
S'cls'
sI99
S'print self.guiDct'
sI100
S'print guiDct'
sI101
S'print __builtins__.guiDct'
sI102
S"self.textVar.set('Test output sent to text widget')"
s.